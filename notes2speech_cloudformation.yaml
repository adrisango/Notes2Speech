AWSTemplateFormatVersion: '2010-09-09'

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: notes2speechlambda
      Runtime: python3.10
      Timeout: 30
      Handler: term-project-python/lambda_function.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/term-assignment-role
      Code:
        S3Bucket: csci5409-term-assignment-upload 
        S3Key: term-project-python.zip

  LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHttpApi}/*/*/process-image"

  ApiGatewayHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: notes2speechapi
      ProtocolType: HTTP
      CorsConfiguration:
        AllowHeaders: 
          - '*'
        AllowMethods: 
          - '*'
        AllowOrigins: 
          - '*'
        ExposeHeaders: 
          - '*'

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayHttpApi
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
      TimeoutInMillis: 30000
      PayloadFormatVersion: '2.0' 

  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayHttpApi
      RouteKey: 'POST /process-image'
      Target: !Join
      - '/'
      - - integrations
        - !Ref ApiGatewayIntegration

  ApiGatewayStage:  
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayHttpApi
      StageName:  $default
      AutoDeploy: true

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: csci5409notes2speech
      PublicAccessBlockConfiguration:
          BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
          
  PublicS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicRead
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"


  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access, HTTP, and Port 3000 inbound traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000  

  notes2speechEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-053b0d53c279acc90  
      InstanceType: t2.micro
      SecurityGroups:
        - Ref: EC2InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update
          sudo apt install -y docker.io
          sudo systemctl start docker
          sudo usermod -aG docker ubuntu
          docker pull adrianapsang/notes2speech:ta
          docker run -d -e REACT_APP_API_GATEWAY_URL=https://${ApiGatewayHttpApi}.execute-api.${AWS::Region}.amazonaws.com -p 3000:3000 adrianapsang/notes2speech:ta
    DependsOn:
      - ApiGatewayHttpApi  

Outputs:
  ApiGatewayHttpApiUrl:
    Description: Output my newly created api gateway url, this is also passed as an env variable to my docker img in ec2
    Value: !Sub "https://${ApiGatewayHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
